/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StateMachineGrammarAccess extends AbstractGrammarElementFinder {
	
	public class StateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.StateMachine.StateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateMachineAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEventsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cBlockKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cEventAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cEventEventParserRuleCall_1_3_0 = (RuleCall)cEventAssignment_1_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cResetKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cBlockKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Assignment cEventResetAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final CrossReference cEventResetEventCrossReference_2_3_0 = (CrossReference)cEventResetAssignment_2_3.eContents().get(0);
		private final RuleCall cEventResetEventIDTerminalRuleCall_2_3_0_1 = (RuleCall)cEventResetEventCrossReference_2_3_0.eContents().get(1);
		private final RuleCall cENDTerminalRuleCall_2_4 = (RuleCall)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cActionsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cBlockKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Assignment cInstructionsAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_3_0 = (RuleCall)cInstructionsAssignment_3_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3_4 = (RuleCall)cGroup_3.eContents().get(4);
		private final Assignment cStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStateStateParserRuleCall_4_0 = (RuleCall)cStateAssignment_4.eContents().get(0);
		
		//StateMachine:
		//	{StateMachine} ("Events" "block" BEGIN
		//	event+=Event+
		//	END) ("Reset" "block" BEGIN
		//	eventReset+=[Event]*
		//	END) ("Actions" "block" BEGIN
		//	instructions+=Instruction*
		//	END) state+=State*;
		@Override public ParserRule getRule() { return rule; }
		
		//{StateMachine} ("Events" "block" BEGIN event+=Event+ END) ("Reset" "block" BEGIN eventReset+=[Event]* END) ("Actions"
		//"block" BEGIN instructions+=Instruction* END) state+=State*
		public Group getGroup() { return cGroup; }
		
		//{StateMachine}
		public Action getStateMachineAction_0() { return cStateMachineAction_0; }
		
		//("Events" "block" BEGIN event+=Event+ END)
		public Group getGroup_1() { return cGroup_1; }
		
		//"Events"
		public Keyword getEventsKeyword_1_0() { return cEventsKeyword_1_0; }
		
		//"block"
		public Keyword getBlockKeyword_1_1() { return cBlockKeyword_1_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1_2() { return cBEGINTerminalRuleCall_1_2; }
		
		//event+=Event+
		public Assignment getEventAssignment_1_3() { return cEventAssignment_1_3; }
		
		//Event
		public RuleCall getEventEventParserRuleCall_1_3_0() { return cEventEventParserRuleCall_1_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_1_4() { return cENDTerminalRuleCall_1_4; }
		
		//("Reset" "block" BEGIN eventReset+=[Event]* END)
		public Group getGroup_2() { return cGroup_2; }
		
		//"Reset"
		public Keyword getResetKeyword_2_0() { return cResetKeyword_2_0; }
		
		//"block"
		public Keyword getBlockKeyword_2_1() { return cBlockKeyword_2_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2_2() { return cBEGINTerminalRuleCall_2_2; }
		
		//eventReset+=[Event]*
		public Assignment getEventResetAssignment_2_3() { return cEventResetAssignment_2_3; }
		
		//[Event]
		public CrossReference getEventResetEventCrossReference_2_3_0() { return cEventResetEventCrossReference_2_3_0; }
		
		//ID
		public RuleCall getEventResetEventIDTerminalRuleCall_2_3_0_1() { return cEventResetEventIDTerminalRuleCall_2_3_0_1; }
		
		//END
		public RuleCall getENDTerminalRuleCall_2_4() { return cENDTerminalRuleCall_2_4; }
		
		//("Actions" "block" BEGIN instructions+=Instruction* END)
		public Group getGroup_3() { return cGroup_3; }
		
		//"Actions"
		public Keyword getActionsKeyword_3_0() { return cActionsKeyword_3_0; }
		
		//"block"
		public Keyword getBlockKeyword_3_1() { return cBlockKeyword_3_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3_2() { return cBEGINTerminalRuleCall_3_2; }
		
		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_3_3() { return cInstructionsAssignment_3_3; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_3_0() { return cInstructionsInstructionParserRuleCall_3_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_3_4() { return cENDTerminalRuleCall_3_4; }
		
		//state+=State*
		public Assignment getStateAssignment_4() { return cStateAssignment_4; }
		
		//State
		public RuleCall getStateStateParserRuleCall_4_0() { return cStateStateParserRuleCall_4_0; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.StateMachine.Instruction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Instruction:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.StateMachine.Event");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Event:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.StateMachine.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cBlockKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cActionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cActionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cActionsInstructionCrossReference_4_1_0 = (CrossReference)cActionsAssignment_4_1.eContents().get(0);
		private final RuleCall cActionsInstructionIDTerminalRuleCall_4_1_0_1 = (RuleCall)cActionsInstructionCrossReference_4_1_0.eContents().get(1);
		private final Assignment cMovesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMovesMoveParserRuleCall_5_0 = (RuleCall)cMovesAssignment_5.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//State:
		//	"State" name=ID "block" BEGIN ("action" actions+=[Instruction]+)?
		//	moves+=Move*
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//"State" name=ID "block" BEGIN ("action" actions+=[Instruction]+)? moves+=Move* END
		public Group getGroup() { return cGroup; }
		
		//"State"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"block"
		public Keyword getBlockKeyword_2() { return cBlockKeyword_2; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }
		
		//("action" actions+=[Instruction]+)?
		public Group getGroup_4() { return cGroup_4; }
		
		//"action"
		public Keyword getActionKeyword_4_0() { return cActionKeyword_4_0; }
		
		//actions+=[Instruction]+
		public Assignment getActionsAssignment_4_1() { return cActionsAssignment_4_1; }
		
		//[Instruction]
		public CrossReference getActionsInstructionCrossReference_4_1_0() { return cActionsInstructionCrossReference_4_1_0; }
		
		//ID
		public RuleCall getActionsInstructionIDTerminalRuleCall_4_1_0_1() { return cActionsInstructionIDTerminalRuleCall_4_1_0_1; }
		
		//moves+=Move*
		public Assignment getMovesAssignment_5() { return cMovesAssignment_5; }
		
		//Move
		public RuleCall getMovesMoveParserRuleCall_5_0() { return cMovesMoveParserRuleCall_5_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
	}
	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.StateMachine.Move");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEventEventCrossReference_0_0 = (CrossReference)cEventAssignment_0.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_0_0_1 = (RuleCall)cEventEventCrossReference_0_0.eContents().get(1);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateStateCrossReference_2_0 = (CrossReference)cStateAssignment_2.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_2_0_1 = (RuleCall)cStateStateCrossReference_2_0.eContents().get(1);
		
		//Move:
		//	event=[Event] "to" state=[State];
		@Override public ParserRule getRule() { return rule; }
		
		//event=[Event] "to" state=[State]
		public Group getGroup() { return cGroup; }
		
		//event=[Event]
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }
		
		//[Event]
		public CrossReference getEventEventCrossReference_0_0() { return cEventEventCrossReference_0_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_0_0_1() { return cEventEventIDTerminalRuleCall_0_0_1; }
		
		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//state=[State]
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }
		
		//[State]
		public CrossReference getStateStateCrossReference_2_0() { return cStateStateCrossReference_2_0; }
		
		//ID
		public RuleCall getStateStateIDTerminalRuleCall_2_0_1() { return cStateStateIDTerminalRuleCall_2_0_1; }
	}
	
	
	private final StateMachineElements pStateMachine;
	private final InstructionElements pInstruction;
	private final EventElements pEvent;
	private final StateElements pState;
	private final MoveElements pMove;
	private final TerminalRule tSTRING;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StateMachineGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStateMachine = new StateMachineElements();
		this.pInstruction = new InstructionElements();
		this.pEvent = new EventElements();
		this.pState = new StateElements();
		this.pMove = new MoveElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.StateMachine.STRING");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.StateMachine.DOUBLE");
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.StateMachine.BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.StateMachine.END");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.StateMachine".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//StateMachine:
	//	{StateMachine} ("Events" "block" BEGIN
	//	event+=Event+
	//	END) ("Reset" "block" BEGIN
	//	eventReset+=[Event]*
	//	END) ("Actions" "block" BEGIN
	//	instructions+=Instruction*
	//	END) state+=State*;
	public StateMachineElements getStateMachineAccess() {
		return pStateMachine;
	}
	
	public ParserRule getStateMachineRule() {
		return getStateMachineAccess().getRule();
	}
	
	//Instruction:
	//	name=ID;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//Event:
	//	name=ID;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//State:
	//	"State" name=ID "block" BEGIN ("action" actions+=[Instruction]+)?
	//	moves+=Move*
	//	END;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Move:
	//	event=[Event] "to" state=[State];
	public MoveElements getMoveAccess() {
		return pMove;
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}
	
	//@Override
	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal DOUBLE:
	//	INT '.' INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal BEGIN:
	//	'synthetic:BEGIN';
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//terminal END:
	//	'synthetic:END';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
