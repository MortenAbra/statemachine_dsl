/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.validation;

import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.xtext.example.mydsl.stateMachine.Event;
import org.xtext.example.mydsl.stateMachine.Instruction;
import org.xtext.example.mydsl.stateMachine.Move;
import org.xtext.example.mydsl.stateMachine.StateMachine;
import org.xtext.example.mydsl.stateMachine.StateMachinePackage;
import org.xtext.example.mydsl.validation.AbstractStateMachineValidator;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class StateMachineValidator extends AbstractStateMachineValidator {
  public static final String INVALID_NAME = "invalidName";
  
  public static final String INVALID_ACTION = "invalidAction";
  
  @Check
  public void checkBlockIsNotEmpty(final StateMachine model) {
    boolean _isEmpty = model.getEvent().isEmpty();
    if (_isEmpty) {
      this.error("Empty blocks is not allowed!!", StateMachinePackage.Literals.STATE_MACHINE__EVENT);
    }
  }
  
  @Check
  public void checkForMultipleAttritbuteInstances(final StateMachine model) {
    EList<Event> _event = model.getEvent();
    for (final Event e : _event) {
      boolean _contains = model.getEvent().contains(e.getName());
      if (_contains) {
        this.error("Multiple of same event types not allowed!", StateMachinePackage.Literals.STATE_MACHINE__EVENT);
      }
    }
  }
  
  @Check
  public void checkEventAttributeStartingWithLowercase(final StateMachine model) {
    EList<Event> _event = model.getEvent();
    for (final Event e : _event) {
      {
        char[] charArray = e.getName().toCharArray();
        int _length = charArray.length;
        ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length, true);
        for (final Integer i : _doubleDotLessThan) {
          boolean _isLowerCase = Character.isLowerCase(charArray[0]);
          boolean _not = (!_isLowerCase);
          if (_not) {
            this.error("Event attributes must be lower case!", StateMachinePackage.Literals.STATE_MACHINE__EVENT);
          }
        }
      }
    }
  }
  
  @Check
  public void checkInstructionsAttributeStartingWithLowercase(final StateMachine model) {
    EList<Instruction> _instructions = model.getInstructions();
    for (final Instruction e : _instructions) {
      {
        final char[] charArray = e.getName().toCharArray();
        int _length = charArray.length;
        ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length, true);
        for (final Integer i : _doubleDotLessThan) {
          boolean _isLowerCase = Character.isLowerCase(charArray[0]);
          boolean _not = (!_isLowerCase);
          if (_not) {
            this.error("Instruction attributes must be lower case!", StateMachinePackage.Literals.STATE_MACHINE__INSTRUCTIONS);
          }
        }
      }
    }
  }
  
  @Check
  public void checkStateAttributeStartingWithUpperCase(final StateMachine model) {
    EList<org.xtext.example.mydsl.stateMachine.State> _state = model.getState();
    for (final org.xtext.example.mydsl.stateMachine.State e : _state) {
      {
        final char[] charArray = e.getName().toCharArray();
        int _length = charArray.length;
        ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length, true);
        for (final Integer i : _doubleDotLessThan) {
          boolean _isLowerCase = Character.isLowerCase(charArray[0]);
          if (_isLowerCase) {
            this.error("States must be upper case!", StateMachinePackage.Literals.STATE_MACHINE__STATE);
          }
        }
      }
    }
  }
  
  @Check
  public void validateStateNames(final Move move) {
    final org.xtext.example.mydsl.stateMachine.State state = EcoreUtil2.<org.xtext.example.mydsl.stateMachine.State>getContainerOfType(move.eContainer(), org.xtext.example.mydsl.stateMachine.State.class);
    boolean _equals = move.getState().equals(state);
    if (_equals) {
      this.error("You naughty boy", StateMachinePackage.eINSTANCE.getMove_State());
    }
  }
}
