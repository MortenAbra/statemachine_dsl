/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.example.mydsl.stateMachine.Event;
import org.xtext.example.mydsl.stateMachine.Expression;
import org.xtext.example.mydsl.stateMachine.Instruction;
import org.xtext.example.mydsl.stateMachine.Move;
import org.xtext.example.mydsl.stateMachine.State;
import org.xtext.example.mydsl.stateMachine.StateMachine;
import org.xtext.example.mydsl.stateMachine.Trigger;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class StateMachineGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource res, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<StateMachine> _filter = Iterables.<StateMachine>filter(IteratorExtensions.<EObject>toIterable(res.getAllContents()), StateMachine.class);
    for (final StateMachine e : _filter) {
      String _name = this.getName(e.eResource());
      String _plus = (_name + ".py");
      fsa.generateFile(_plus, this.compileStateMachine(e));
    }
  }
  
  public CharSequence compileStateMachine(final StateMachine model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class ");
    String _name = this.getName(model.eResource());
    _builder.append(_name);
    _builder.append("():");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def inputHandler(self):");
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _generateInputHandler = this.generateInputHandler(model);
    _builder.append(_generateInputHandler, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    {
      EList<Instruction> _instructions = model.getInstructions();
      for(final Instruction c : _instructions) {
        _builder.append("\t");
        CharSequence _generateInstructions = this.generateInstructions(c);
        _builder.append(_generateInstructions, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def run(self):");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("print(\'Press A for all actions or: \', \'\\n\')");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.currentState = \"");
    State _head = IterableExtensions.<State>head(model.getState());
    String _name_1 = null;
    if (_head!=null) {
      _name_1=_head.getName();
    }
    _builder.append(_name_1, "\t\t");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("self.previousEvent = None");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.previousState = None");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("self.running = True");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(self.running):");
    _builder.newLine();
    {
      EList<State> _state = model.getState();
      for(final State state : _state) {
        _builder.append("\t\t\t");
        CharSequence _generateStates = this.generateStates(state);
        _builder.append(_generateStates, "\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Event> _eventReset = model.getEventReset();
      for(final Event eventReset : _eventReset) {
        _builder.append("\t\t\t");
        _builder.append("if(self.previousEvent == \'");
        String _name_2 = eventReset.getName();
        _builder.append(_name_2, "\t\t\t");
        _builder.append("\'):");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("print(\'Resetting\')");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("currentState = \'");
        State _head_1 = IterableExtensions.<State>head(model.getState());
        String _name_3 = null;
        if (_head_1!=null) {
          _name_3=_head_1.getName();
        }
        _builder.append(_name_3, "\t\t\t\t");
        _builder.append("\'");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("if __name__ == \'__main__\':");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("state = ");
    String _name_4 = this.getName(model.eResource());
    _builder.append(_name_4, "\t");
    _builder.append("()");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("state.run()");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateInputHandler(final StateMachine model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("n = input(\'Enter new action: \')");
    _builder.newLine();
    _builder.append("n = str(n)");
    _builder.newLine();
    _builder.append("if(n == \'A\'):");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _generateEvents = this.generateEvents(model);
    _builder.append(_generateEvents, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("if(n == \'stop\'):");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("self.running = False");
    _builder.newLine();
    _builder.newLine();
    _builder.append("return n");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEvents(final StateMachine model) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Event> _event = model.getEvent();
      for(final Event c : _event) {
        _builder.append("print(\'");
        String _name = c.getName();
        _builder.append(_name);
        _builder.append("\')");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence generateStates(final State state) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("if(self.currentState == \'");
    String _name = state.getName();
    _builder.append(_name);
    _builder.append("\'):");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Instruction> _actions = state.getActions();
      for(final Instruction e : _actions) {
        _builder.append("\t");
        _builder.append("self.");
        String _firstLower = StringExtensions.toFirstLower(e.getName());
        _builder.append(_firstLower, "\t");
        _builder.append("()");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("print(\'Current state is:  ");
    String _name_1 = state.getName();
    _builder.append(_name_1, "\t");
    _builder.append(".\')");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("self.previousEvent = self.inputHandler()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("self.previousState = self.currentState");
    _builder.newLine();
    {
      EList<Move> _moves = state.getMoves();
      for(final Move c : _moves) {
        _builder.append("\t");
        _builder.append("if(self.previousEvent == \'");
        String _extractEventName = this.extractEventName(c.getEvent());
        _builder.append(_extractEventName, "\t");
        _builder.append("\'):");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("self.currentState = \'");
        String _name_2 = c.getState().getName();
        _builder.append(_name_2, "\t\t");
        _builder.append("\'");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("print(\'Previous state is: \',str(self.previousState))");
        _builder.newLine();
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public String extractEventName(final Trigger trig) {
    if ((!(trig instanceof Expression))) {
      return trig.getEvent().getName();
    } else {
      return this.stringify(((Expression) trig));
    }
  }
  
  public String stringify(final Expression exp) {
    return "\"dummy_expression\"";
  }
  
  public CharSequence generateInstructions(final Instruction ins) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("def ");
    String _firstLower = StringExtensions.toFirstLower(ins.getName());
    _builder.append(_firstLower);
    _builder.append("(self):");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("print(\'Running instruction ");
    String _name = ins.getName();
    _builder.append(_name, "\t");
    _builder.append("\')");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String getName(final Resource resource) {
    String name = resource.getURI().lastSegment();
    return StringExtensions.toFirstUpper(name.substring(0, name.indexOf(".")));
  }
}
