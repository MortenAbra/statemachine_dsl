/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.example.mydsl.stateMachine.Instruction;
import org.xtext.example.mydsl.stateMachine.StateMachine;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class StateMachineGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource res, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<StateMachine> _filter = Iterables.<StateMachine>filter(IteratorExtensions.<EObject>toIterable(res.getAllContents()), StateMachine.class);
    for (final StateMachine e : _filter) {
      String _name = this.getName(e.eResource());
      String _plus = (_name + ".py");
      fsa.generateFile(_plus, this.compileStateMachineCode(e));
    }
  }
  
  public CharSequence compileStateMachineCode(final StateMachine model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class ");
    String _name = this.getName(model.eResource());
    _builder.append(_name);
    _builder.append("():");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      EList<Instruction> _instructions = model.getInstructions();
      for(final Instruction c : _instructions) {
        _builder.append("\t");
        CharSequence _generateInstructions = this.generateInstructions(c);
        _builder.append(_generateInstructions, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def run(self):");
    _builder.newLine();
    {
      EList<Instruction> _instructions_1 = model.getInstructions();
      for(final Instruction c_1 : _instructions_1) {
        _builder.append("\t\t");
        _builder.append("self.");
        String _firstLower = StringExtensions.toFirstLower(c_1.getName());
        _builder.append(_firstLower, "\t\t");
        _builder.append("()");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("if __name__ == \'__main__\':");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("state = ");
    String _name_1 = this.getName(model.eResource());
    _builder.append(_name_1, "\t");
    _builder.append("()");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("state.run()");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence generateInstructions(final Instruction ins) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("def ");
    String _firstLower = StringExtensions.toFirstLower(ins.getName());
    _builder.append(_firstLower);
    _builder.append("(self):");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("print(\"Running instruction ");
    String _name = ins.getName();
    _builder.append(_name, "\t");
    _builder.append(" (");
    String _value = ins.getValue();
    _builder.append(_value, "\t");
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String getName(final Resource resource) {
    String name = resource.getURI().lastSegment();
    return StringExtensions.toFirstUpper(name.substring(0, name.indexOf(".")));
  }
}
