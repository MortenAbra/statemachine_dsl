/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.iot_DSL.Model
import org.xtext.example.iot_DSL.LibType
import org.eclipse.emf.common.util.EList
import org.xtext.example.iot_DSL.Libraries

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class Iot_DSLGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e : resource.allContents.toIterable.filter(Model)) {
			fsa.generateFile(e.app.name + ".py", e.compileCode)
		}
	}
	
	private def compileCode(Model model){
		'''
		«generateLibs(model)»
		'''
	} 
	
	def generateLibs(Model model) {
		val libs = model.lib.libs
		'''
			«for(e : libs){
				if(e.net.name == 'Wifi'){
					return '''from network import WLAN'''
				}
				if(e.data.name == 'MQTT'){
					return '''from mqtt import MQTTClient'''
				}
				System.out.println(e.additional)
				}»
		'''
		}
	
}
