/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.stateMachine.StateMachine
import org.xtext.example.mydsl.stateMachine.Instruction
import org.eclipse.xtext.naming.IQualifiedNameProvider
import javax.inject.Inject

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class StateMachineGenerator extends AbstractGenerator {
	
	
	override void doGenerate(Resource res, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e : res.allContents.toIterable.filter(StateMachine)){
			fsa.generateFile(e.eResource.name+".py", e.compileStateObject)
			fsa.generateFile(e.eResource.name+".py", e.compileStateMachineStates)
			fsa.generateFile(e.eResource.name+".py", e.compileStateDevice)
			}
	}
	
	def CharSequence compileStateDevice(StateMachine machine)
	
	def CharSequence compileStateMachineStates(StateMachine model)
	'''
		«FOR e : model.event»
		class «generateStates(model)»(State):
			
		«ENDFOR»
		
		class doorClosed
		
		
		class drawOpened
	'''
	
	def generateStates(StateMachine model) {
		'''
			«FOR e : model.event»
			class «e.name»(«model.class.name»)
			«ENDFOR»
		
		'''
	}
	
	def CharSequence compileStateObject(StateMachine model)
	'''
		class «model.class.name»(object):
		    """
		    We define a state object which provides some utility functions for the
		    individual states within the state machine.
		    """
		
		    def __init__(self):
		        print 'Processing current state:', str(self)
		
		    def on_event(self, event):
		        """
		        Handle events that are delegated to this State.
		        """
		        pass
		
		    def __repr__(self):
		        """
		        Leverages the __str__ method to describe the State.
		        """
		        return self.__str__()
		
		    def __str__(self):
		        """
		        Returns the name of the State.
		        """
		        return self.__class__.__name__
	'''
	
	
	


	
	def getName(Resource resource){
		var name = resource.URI.lastSegment
		return name.substring(0, name.indexOf('.')).toFirstUpper
	}
	
	
}