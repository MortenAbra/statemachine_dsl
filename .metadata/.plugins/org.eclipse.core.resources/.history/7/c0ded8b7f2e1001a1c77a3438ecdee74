/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.scoping


import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import static extension org.eclipse.xtext.EcoreUtil2.*
import org.xtext.example.mydsl.stateMachine.StateMachine
import org.xtext.example.mydsl.stateMachine.State
import org.eclipse.xtext.scoping.Scopes
import org.xtext.example.mydsl.stateMachine.Gate
import org.xtext.example.mydsl.stateMachine.Block

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class StateMachineScopeProvider extends AbstractStateMachineScopeProvider {
	
	override IScope getScope(EObject object, EReference reference){
		if(object instanceof State){
			val sm = object.eContainer.getContainerOfType(StateMachine)
			val gates = sm.gate
			
			val array = newArrayList
			if(!gates.isEmpty){
				val state = (object as State)
				gates.forEach[
					(it as Gate).block.forEach[
						if(state.actions.equals((it as Block).action)){
							val gblock = (it as Block).state
							array.add(gblock)
							
						}
					]
				]
				return Scopes.scopeFor(sm.state.toList.removeAll(array))
			}
		}
		delegateGetScope(object, reference);
	}

}
