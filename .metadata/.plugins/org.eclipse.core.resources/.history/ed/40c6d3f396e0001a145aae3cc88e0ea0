/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.stateMachine.StateMachine
import org.xtext.example.mydsl.stateMachine.Instruction
import org.eclipse.xtext.naming.IQualifiedNameProvider
import javax.inject.Inject

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class StateMachineGenerator extends AbstractGenerator {
	
	@Inject extension IQualifiedNameProvider
	
	override void doGenerate(Resource res, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e : res.allContents.toIterable.filter(StateMachine))
			fsa.generateFile(e.fullyQualifiedName.toString("/")+"py", compileStateMachineCode)
	}
	
	protected def compileStateMachineCode(StateMachine model) {
		return 
		'''
			class «model.eResource.name»():
			
				«FOR c : model.instructions»
					«c.generateInstructions»
				«ENDFOR»
			
				def run(self):
					«FOR c : model.instructions»
					self.«c.name.toFirstLower»()
					«ENDFOR»
				
			if __name__ == '__main__':
				state = «model.eResource.name»()
				state.run()
		
		
		
		
		'''
	}
	
	protected def generateInstructions(Instruction ins)
	'''
		def «ins.name.toFirstLower»(self):
			print("Running instruction «ins.name» («ins.value»")
	'''
	


	
	def getName(Resource resource){
		var name = resource.URI.lastSegment
		return name.substring(0, name.indexOf('.')).toFirstUpper
	}
	
	
}
