/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.stateMachine.StateMachine
import org.xtext.example.mydsl.stateMachine.Model
import org.xtext.example.mydsl.stateMachine.Instruction

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class StateMachineGenerator extends AbstractGenerator {

	override void doGenerate(Resource res, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile(res.getName+".py", compileStateMachineCode(res.contents.head as StateMachine))
	}
	
	protected def compileStateMachineCode(StateMachine machine) {
		return 
		'''
			from time
			
			class «machine.eResource.name»:
			
				def run():
					«FOR c : machine.instructions»
						«c.generateInstructions»
					«ENDFOR»
				
				if __name__ == '__main__':
					run()
		
		
		
		
		'''
	}
	
	protected def generateInstructions(Instruction ins)
	'''
	
	
	'''
	


	
	def getName(Resource resource){
		var name = resource.URI.lastSegment
		return name.substring(0, name.indexOf('.')).toFirstUpper
	}
	
	
}
