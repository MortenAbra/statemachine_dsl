grammar org.xtext.example.Iot_DSL with org.eclipse.xtext.common.Terminals

generate iot_DSL "http://www.xtext.org/example/Iot_DSL"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	app=Application board=Board lib+=Libraries main=Main
;

Application:
	"Application-Title:" name=STRING
;


Main:
	{Main} "MAIN" ":" (exp+=Expression | prefunc+=PreDefinedFunctions)*
;

test:
	Expression | PreDefinedFunctions
;

PreDefinedFunctions:
	Print |  Loop |  Conditions
;

Conditions: 
    "if" "(" condition=OrExpression ")"
    then+=test*
    (=>'else' else=Expression)?
;

Loop:
	{Loop} "while" "(" (bool=BOOLEAN | exp=Expression) ")" ":"
;

BOOLEAN: True | False;
True: "true";
False: "false";

Print:
	{Print} "print" '(' (exp=Expression | name=ID | STRING | Number) ')'
;

Expression:
	NamedExp | OrExpression |  DataTypes
;

NamedExp returns Expression:
	name=ID 'is' (exp+=PlusMinusExp | datatypes+=DataTypes)
;

OrExpression returns Expression:
	AndExpression ({OrExpression.left = current} "||" right=AndExpression)*
;


AndExpression returns Expression:
	ComparisonExpression ({AndExpression.left = current} "&&" right=ComparisonExpression)*
;

ComparisonExpression returns Expression:
	Primary ({ComparisonExpression.left = current} operator=("<"|"<="|"=="|">="|">") right=Primary)*
;

DataTypes:
	{DataTypes} "String" value=STRING | {DataTypes} "Int" value=Number | {DataTypes} "Double" value=DOUBLE | {DataTypes} "Bool" value=BOOLEAN
;


PlusMinusExp returns Expression:
	MulDivExp ({PMExp.left = current} operator=PlusMinus right=MulDivExp)*
;

MulDivExp returns Expression:
	PowExp ({MulDivExp.left = current} operator=MultDiv right=PowExp)*
;

PowExp returns Expression:
	Primary ({PowExp.left = current} operator=Power right=Primary)*
;

PlusMinus:
	{Plus} '+' | {Minus} '-'
;

MultDiv:
	{Multiply} '*' | {Divide} '/'
;

Power:
	{Pow} '**'
;

Primary returns Expression:
	"(" Expression ")" | Literal
;

Literal returns Expression:
	value="true" | {Literal} "false" | {Expression} INT
;

Number:
	INT | NINT
;

Board:
	"Board:" name=STRING;

Libraries:
	{Libraries} "Libraries:" 
;




@Override 
terminal ID: 
    ('^')?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
    
@Override 
terminal STRING:
    '"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
    "'" ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'";

terminal DOUBLE:
    INT '.' INT;


@Override 
terminal INT returns ecore::EInt:
	'0' | ('1'..'9')('0'..'9')*;

terminal NINT returns ecore::EInt:
	'-' ('0' | ('1'..'9')('0'..'9')*);



