/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.scoping


import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import static extension org.eclipse.xtext.EcoreUtil2.*
import org.xtext.example.mydsl.stateMachine.StateMachine
import org.xtext.example.mydsl.stateMachine.State
import org.eclipse.xtext.scoping.Scopes
import org.xtext.example.mydsl.stateMachine.Gate
import org.xtext.example.mydsl.stateMachine.Block
import org.xtext.example.mydsl.stateMachine.Move

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class StateMachineScopeProvider extends AbstractStateMachineScopeProvider {
	
	override IScope getScope(EObject object, EReference reference){
		if(object instanceof Move){
			val sm = object.eContainer.getContainerOfType(StateMachine)
			val gates = sm.gate
			
			val array = newArrayList
			if(!gates.isEmpty){
				val state = object.eContainer.getContainerOfType(State)
				try{
				gates.forEach[
					(it as Gate).block.forEach[
						state.forEach[
							if(it.equals((it as Block).action)){
								val gblock = (it as Block).state
								array.add(gblock)
							}
						]
						//if(state.state.actions.equals((it as Block).action)){
							//val gblock = (it as Block).state
							//array.add(gblock)
							
						//}
					]
				]
				} catch(Exception e) {
					println(e)
				}
				
				//sm.state - array
				val testlist = newArrayList
				for(i:0 ..< sm.state.length){
					val test = sm.state.get(i)
					testlist.add(test)
					print(test)
					
				}
							
				
				
				if((object as Move).event.event.name == 'turn_off'){
					println(array)
					println(testlist)
				}
				testlist.removeAll(array.toList)
				
				
				
				return Scopes.scopeFor(testlist)
			}
		}
		delegateGetScope(object, reference);
	}

}
