/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.validation

import org.xtext.example.mydsl.stateMachine.StateMachine
import org.xtext.example.mydsl.stateMachine.Instruction
import org.xtext.example.mydsl.stateMachine.StateMachinePackage
import org.xtext.example.mydsl.stateMachine.Event
import org.eclipse.xtext.validation.Check
import static extension org.eclipse.xtext.EcoreUtil2.*
import org.xtext.example.mydsl.stateMachine.Move

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class StateMachineValidator extends AbstractStateMachineValidator {
	
	public static final String INVALID_NAME = "invalidName";
	public static final String INVALID_ACTION = "invalidAction";
	
	@Check
	def void checkBlockIsNotEmpty(StateMachine model) {
		if(model.getEvent().isEmpty()) {
			error("Empty blocks is not allowed!!", StateMachinePackage.Literals.STATE_MACHINE__EVENT);
		}
	}

	@Check
	def void checkEventAttributeStartingWithLowercase(StateMachine model) {
		for(Event e : model.getEvent()) {
			var charArray = e.getName().toCharArray();
			for(i : 0 ..< charArray.length) {
				if(!Character.isLowerCase(charArray.get(0))) {
					error("Event attributes must be lower case!", StateMachinePackage.Literals.STATE_MACHINE__EVENT);
				}
				
			}
		}
	}
	
	@Check
	def void checkInstructionsAttributeStartingWithLowercase(StateMachine model) {
		for(Instruction e : model.getInstructions()) {
			val charArray = e.getName().toCharArray();
			for(i : 0 ..< charArray.length) {
				if(!Character.isLowerCase(charArray.get(0))) {
					error("Instruction attributes must be lower case!", StateMachinePackage.Literals.STATE_MACHINE__INSTRUCTIONS);
				}
				
			}
		}
	}
	
	@Check
	def checkStateAttributeStartingWithUpperCase(StateMachine model) {
		for(org.xtext.example.mydsl.stateMachine.State e : model.getState()) {
			val charArray = e.getName().toCharArray();
			for(i : 0 ..< charArray.length) {
				if(Character.isLowerCase(charArray.get(0))) {
					error("States must be upper case!", StateMachinePackage.Literals.STATE_MACHINE__STATE);
				}
				
			}
		}
	}
	
	@Check
	def validateStateNames(Move move){ //Note, AbstractStateMachineValidator is recoqnised as State, therefore importing state manually
		val state = move.eContainer.getContainerOfType(org.xtext.example.mydsl.stateMachine.State)
		if(move.state.equals(state)){
			error("You naughty boy", StateMachinePackage.eINSTANCE.move_State)
		}
	}
	
}
