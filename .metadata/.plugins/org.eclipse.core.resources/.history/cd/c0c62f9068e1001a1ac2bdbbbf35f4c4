/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.stateMachine.StateMachine
import org.xtext.example.mydsl.stateMachine.State
import org.xtext.example.mydsl.stateMachine.Action

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class StateMachineGenerator extends AbstractGenerator {
	
	
	override void doGenerate(Resource res, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e : res.allContents.toIterable.filter(StateMachine)){
			fsa.generateFile(e.eResource.name+".py", e.compileStateMachine)
			}
	}
	
	def CharSequence compileStateMachine(StateMachine model)
		'''
			class «model.eResource.name»():
			
				def inputHandler(self):
					«generateInputHandler(model)»
																
				«FOR c : model.instructions»
					«c.generateInstructions»
				«ENDFOR»
					
				def run(self):
					print('Press A for all actions or: ', '\n')
					self.currentState = "«model.state.head?.name»"
					self.previousEvent = None
					self.enableActions = True
					self.running = True
					
					while(self.running):
						«FOR state : model.state»
							«state.generateActions»
						«ENDFOR»
						«FOR eventReset : model.eventReset»
							if(self.previousEvent == '«eventReset.name»'):
								print('Resetting')
								currentState = '«model.state.head?.name»'
								enableActions = True
						«ENDFOR»

					

						
				
			if __name__ == '__main__':
				state = «model.eResource.name»()
				state.run()

		'''
	
	def generateInputHandler(StateMachine model) {
		return
		'''
		n = input('Enter new action: ')
		n = str(n)
		if(n == 'A'):
			«generateEvents(model)»
		if(n == 'stop'):
			self.running = False
		
		return n
		'''
	}
	
	def generateEvents(StateMachine model)'''
		«FOR c : model.event»
			print('«c.name»')
		«ENDFOR»
	'''
		
	def generateActions(State state) 
	'''
		if(self.currentState == '«state.name»'):
			if(self.enableActions):
				
				«FOR e : state.»
					self.«e.name.toFirstLower»()
				«ENDFOR»
				print('Current state is:  «state.name».')
				self.enableActions = False
			self.previousEvent = self.inputHandler()
			«FOR c : state.moves»
				if('«c.event.name»' == self.previousEvent):
					self.currentState = '«c.state.name»'
					self.enableActions = True
			«ENDFOR»

	'''
	
	
	def generateInstructions(Instruction ins)
	'''
		def «ins.name.toFirstLower»(self):
			print('Running instruction «ins.name»')
	'''
	


	
	def getName(Resource resource){
		var name = resource.URI.lastSegment
		return name.substring(0, name.indexOf('.')).toFirstUpper
	}
	
	
}