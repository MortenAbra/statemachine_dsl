/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.scoping;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.xtext.example.mydsl.stateMachine.State;
import org.xtext.example.mydsl.stateMachine.StateMachinePackage;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class StateMachineScopeProvider extends AbstractStateMachineScopeProvider {
	@Override
	public IScope getScope(EObject context, EReference reference) {
	    
		// We want to define the Scope for the Element's superElement cross-reference
	    if (context instanceof State && reference == StateMachinePackage.Literals.MOVE__STATE) {
	        EObject rootElement = EcoreUtil2.getRootContainer(context);
	        List<State> candidates = EcoreUtil2.getAllContentsOfType(rootElement, State.class);
	        
	        for (int i = 0; i < candidates.size(); i++) {
	        	State test = candidates.get(i).getMoves().getState();
	        		if (frame.eContents().contains(context)) {
		        		candidates.remove(i);
	        		}
	        	}
	        }
	        
	        // Create IEObjectDescriptions and puts them into an IScope instance
	        return Scopes.scopeFor(candidates);
	    }
	    return super.getScope(context, reference);
	} 
}
